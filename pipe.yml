image: node:11.12.0
options:
  size: 2x

pipelines:
  default:
  - step:
      name: Test
      caches:
        - docker
        - npm
      services:
        - docker
      script:
        - apt update && apt install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
        - apt-get install -y xvfb
        - npm ci
        - npm run lint
        - curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        - chmod +x /usr/local/bin/docker-compose
        - npm run dev:services:run
        - npm run bootstrap
        - docker logs dev_ethereum_bridge
        - npm run migrate:test && npm run test
        #- npm run migrate && npm run dev & (./node_modules/.bin/wait-on http://localhost:8080 && npm run test:e2e)

  custom:
    deploy-staging:
      - step:
          name: Test
          caches:
            - docker
            - npm
          services:
            - docker
            - rabbitmq
            - postgres
          script:
            - apt update && apt install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
            - apt-get install -y xvfb
            - npm ci
            - npm run lint
            - curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            - chmod +x /usr/local/bin/docker-compose
            - npm run dev:services:run
            - npm run bootstrap
            - npm run migrate:test && npm run test
            - npm run migrate && npm run dev & (./node_modules/.bin/wait-on http://localhost:8080 && npm run test:e2e)
      - step:
          name: Deploy to STAGING
          trigger: manual
          deployment: staging
          services:
            - docker
          caches:
            - docker
            - npm
          script:
            # Install kubectl
            - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            - chmod +x ./kubectl
            - mv ./kubectl /usr/local/bin/kubectl
            # Install google-cloud-sdk
            - SDK_VERSION=216.0.0
            - SDK_FILENAME=google-cloud-sdk-${SDK_VERSION}-linux-x86_64.tar.gz
            - curl -o /tmp/google-cloud-sdk.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/${SDK_FILENAME}
            - tar -xvf /tmp/google-cloud-sdk.tar.gz -C /tmp/
            - /tmp/google-cloud-sdk/install.sh -q
            - source /tmp/google-cloud-sdk/path.bash.inc
            - gcloud -v
            # Authorize to Google Cloud Console
            - echo $GCLOUD_API_KEYFILE | base64 --decode --ignore-garbage > ./gcloud-api-key.json
            - gcloud auth activate-service-account --key-file gcloud-api-key.json
            - gcloud config set project $GCLOUD_PROJECT_ID
            - gcloud container clusters get-credentials $GCLOUD_CLUSTER --zone=$GCLOUD_ZONE --project $GCLOUD_PROJECT_ID
            - gcloud auth configure-docker --quiet
            - node -v
            - npm -v
            - kubectl config get-contexts
            - kubectl version
            - export NODE_ENV=production
            # Install dependencies
            - npm ci
            - npm run bootstrap
            # Add cluster-admin role if it's not created
            - gcloud config get-value account
            - kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user $(gcloud config get-value account) || true
            # Run deployment
            - npm run deploy:gke

definitions:
  caches:
    npm: $HOME/.npm
  services:
    docker:
      memory: 2048
